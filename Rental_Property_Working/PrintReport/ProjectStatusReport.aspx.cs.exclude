using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Data.SqlClient;
using System.Threading;
using System.IO;
using System.Collections.Generic;

using Build.Utility;
using Build.EntityClass;
using Build.DB;
using Build.DataModel;
using Build.DALSQLHelper;

using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;
using System.Text;
public partial class Reports_ProjectStatusReport : System.Web.UI.Page
{
    #region[Private Variables]
    DMPROJECTSTATUSREPORT Obj_ProsCust = new DMPROJECTSTATUSREPORT();
    ProspectCustomer Entity_ProsCust = new ProspectCustomer();
    CommanFunction Obj_Comm = new CommanFunction();
    DataSet DS = new DataSet();
    public static DataSet dsExport = new DataSet();

    private string StrError = string.Empty;
    private string StrCondition = string.Empty;
    private string StrCondition2 = string.Empty;
    decimal NetTotal = 0,area=0,AGVALUE=0,STAGEDues=0,StageREC=0,STBalanCE=0,SOILDAREA=0,avgSaleRate=0;
    int Fcount = 0;
    #endregion
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!Page.IsPostBack)
        {
            Fillcombo();
            MakeEmptyForm();
            SetInitialRow();
        }
    }

    private void MakeEmptyForm()
    {
        ddlProject.SelectedValue = "0";
        ddlCustomer.SelectedValue = "0";
        ddlStage.SelectedValue = "0";
        ddlTower.SelectedValue = "0";
        ddlUnit.SelectedValue = "0";
        ChkFrmDate.Checked = true;
        txtFromDate.Text = DateTime.Now.AddMonths(-1).ToString("dd-MMM-yyyy");
        txtToDate.Text = DateTime.Now.ToString("dd-MMM-yyyy");
        lblCount.Visible = false;
        SetInitialRow();
    }

    private void Fillcombo()
    {
        try
        {
            DS = Obj_ProsCust.FillCombo(out StrError);
            //  DsCombo = Obj_Booking.FillCombo(out StrError);
            if (DS.Tables.Count > 0)
            {
                //===========Grade
                if (DS.Tables[0].Rows.Count > 0)
                {
                    ddlProject.DataSource = DS.Tables[0];
                    ddlProject.DataTextField = "PCName";
                    ddlProject.DataValueField = "PCId";
                    ddlProject.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public void SetInitialRow()
    {
        try
        {
            DataTable dt = new DataTable();
            DataRow dr = null;
            dt.Columns.Add(new DataColumn("#", typeof(int)));
            dt.Columns.Add(new DataColumn("TowerName", typeof(string)));
            dt.Columns.Add(new DataColumn("FlatNo", typeof(string)));
            dt.Columns.Add(new DataColumn("Applicant1", typeof(string)));
            dt.Columns.Add(new DataColumn("SaleableArea", typeof(string)));
            dt.Columns.Add(new DataColumn("RateperSqft", typeof(decimal)));
            dt.Columns.Add(new DataColumn("TotalFlatAmount", typeof(decimal)));
            dt.Columns.Add(new DataColumn("StageName", typeof(string)));
            dt.Columns.Add(new DataColumn("StageDues", typeof(decimal)));
            dt.Columns.Add(new DataColumn("AmtRecd", typeof(decimal)));
            dt.Columns.Add(new DataColumn("Balance", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ServiceTaxDues", typeof(decimal)));

            dt.Columns.Add(new DataColumn("ServiceTaxReceived", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ServiceTaxBal", typeof(decimal)));
            dt.Columns.Add(new DataColumn("VatDues", typeof(decimal)));
            dt.Columns.Add(new DataColumn("VatReceived", typeof(decimal)));
            dt.Columns.Add(new DataColumn("VatBal", typeof(decimal)));
            dt.Columns.Add(new DataColumn("CommitedDate", typeof(string)));
            dr = dt.NewRow();

            dr["#"] = 0;
            dr["TowerName"] = "";
            dr["FlatNo"] = "";
            dr["Applicant1"] = "";
            dr["SaleableArea"] = 0;
            dr["RateperSqft"] = 0;
            dr["TotalFlatAmount"] = 0;
            dr["StageName"] = "";
            dr["StageDues"] = 0;
            dr["AmtRecd"] = 0;
            dr["Balance"] = 0;
            dr["ServiceTaxDues"] = 0;
            dr["ServiceTaxReceived"] = 0;
            dr["ServiceTaxBal"] = 0;
            dr["VatDues"] = 0;
            dr["VatReceived"] = 0;
            dr["VatBal"] = 0;
            dr["CommitedDate"] = "";
            dt.Rows.Add(dr);
            ViewState["CurrentTable"] = dt;
            GridEnquiry.DataSource = dt;
            GridEnquiry.DataBind();
            dt = null;
            dr = null;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    protected void ChkFrmDate_CheckedChanged(object sender, EventArgs e)
    {
        if (ChkFrmDate.Checked == true)
        {
            txtFromDate.Text = DateTime.Now.AddMonths(-1).ToString("dd-MMM-yyyy");
            txtToDate.Text = DateTime.Now.ToString("dd-MMM-yyyy");
            txtFromDate.Enabled = true;
            txtToDate.Enabled = true;
        }
        else
        {
            txtFromDate.Text = string.Empty;
            txtToDate.Text = string.Empty;
            txtFromDate.Enabled = false;
            txtToDate.Enabled = false;
        }
    }

    protected void BtnShow_Click(object sender, EventArgs e)
    {
        try
        {
            DataSet DsGrd = new DataSet();
            int pcid=0;
            StrCondition = string.Empty;
             StrCondition2 = string.Empty;
            if (!string.IsNullOrEmpty(ddlProject.Text) && Convert.ToInt32(ddlProject.SelectedValue) > 0)
            {
                StrCondition = StrCondition + " and BM.PCId=" + Convert.ToInt32(ddlProject.SelectedValue);
                StrCondition2 = StrCondition2 + " where PCId=" + Convert.ToInt32(ddlProject.SelectedValue);
                //pcid=Convert.ToInt32(ddlProject.SelectedValue);
            }
            if (ChkFrmDate.Checked == true)
            {
                StrCondition = StrCondition + " and dm.DemandDate between '" + Convert.ToDateTime(txtFromDate.Text).ToString("MM-dd-yyyy") + "' AND '" + Convert.ToDateTime(txtToDate.Text).ToString("MM-dd-yyyy") + "' ";
            }
            else
            {
                StrCondition = StrCondition + " AND dm.DemandDate between '01-01-1975' AND '" + DateTime.Now.ToString("MM-dd-yyyy") + "' ";
            }

            if (!string.IsNullOrEmpty(ddlTower.Text) && Convert.ToInt32(ddlTower.SelectedValue) > 0)
            {
                StrCondition = StrCondition + " and PDM.TowerName='" + Convert.ToString(ddlTower.SelectedItem.Text) +"' ";
                StrCondition2 = StrCondition2 + " and TowerName='" + Convert.ToString(ddlTower.SelectedItem.Text) + "' ";
            }

            if (!string.IsNullOrEmpty(ddlCustomer.Text) && Convert.ToInt32(ddlCustomer.SelectedValue) > 0)
            {
                StrCondition = StrCondition + " and BM.BookingId=" + Convert.ToInt32(ddlCustomer.SelectedValue);
            }

            if (!string.IsNullOrEmpty(ddlUnit.Text) && Convert.ToInt32(ddlUnit.SelectedValue) > 0)
            {
                StrCondition = StrCondition + " and FM.FlatTypeId=" + Convert.ToInt32(ddlUnit.SelectedValue);
            }

            if (!string.IsNullOrEmpty(ddlStage.Text) && Convert.ToInt32(ddlStage.SelectedValue) > 0)
            {
                StrCondition = StrCondition + " and DM.DemandID=" + Convert.ToInt32(ddlStage.SelectedValue);
            }

            BindReportGrid(StrCondition, StrCondition2);
        }
        catch (Exception ex) { throw new Exception(ex.Message); }
    }

    public void BindReportGrid(string RepCondition, string StrCondition2)
    {
        try
        {
            DataSet DsReport = new DataSet();
            DsReport = Obj_ProsCust.GetEnquiryReport(RepCondition, StrCondition2,Convert, out StrError);
            if (DsReport.Tables.Count > 0 && DsReport.Tables[0].Rows.Count > 0)
            {
                GridEnquiry.DataSource = DsReport.Tables[0];
                GridEnquiry.DataBind();
                lblCount.Text = DsReport.Tables[0].Rows.Count + " Records Found";
                lblCount.Visible = true;
                dsExport = DsReport.Copy();
            }
            else
            {
                GridEnquiry.DataSource = null;
                GridEnquiry.DataBind();
                lblCount.Text = DsReport.Tables[0].Rows.Count + " Records Found";
                lblCount.Visible = true;
                SetInitialRow();
            }
        }
        catch (Exception ex) { throw new Exception(ex.Message); }
    }

    protected void BtnCancel_Click(object sender, EventArgs e)
    {
        MakeEmptyForm();
    }

    protected void ImgBtnExport_Click(object sender, ImageClickEventArgs e)
    {
        DataSet DsGrd = new DataSet();
        StrCondition = string.Empty;
        try
        {
            if (ChkFrmDate.Checked == true)
            {
                StrCondition = StrCondition + " and QM.EnquiryDate between '" + Convert.ToDateTime(txtFromDate.Text).ToString("MM-dd-yyyy") + "' AND '" + Convert.ToDateTime(txtToDate.Text).ToString("MM-dd-yyyy") + "' ";
            }
            else
            {
                StrCondition = StrCondition + " AND QM.EnquiryDate between '01-01-1975' AND '" + DateTime.Now.ToString("MM-dd-yyyy") + "' ";
            }
            //DsGrd = Obj_ProsCust.GetEnquiryReport(StrCondition, out StrError);

            if (DsGrd.Tables[0].Rows.Count > 0)
            {
                //========Call Register
                GridView GridExp = new GridView();
                GridExp.DataSource = DsGrd.Tables[0];
                GridExp.DataBind();
                Obj_Comm.Export("ListOfEnquiries.xls", GridExp);
            }
            else
            {
                Obj_Comm.ShowPopUpMsg("No Data Found To Export..!", this.Page);
                DsGrd.Dispose();
                GridEnquiry.DataSource = null;
                GridEnquiry.DataBind();
            }
        }
        catch (ThreadAbortException ex)
        {
            //throw new Exception(ex.Message);
        }
        catch (Exception ex)
        {
            //throw new Exception(ex.Message);
        }

    }

    protected void ImgPDF_Click(object sender, ImageClickEventArgs e)
    {
        try
        {

            if (dsExport.Tables[0].Rows.Count > 0)
            {
                GridView GridExp = new GridView();
                GridExp.DataSource = dsExport.Tables[0];
                GridExp.DataBind();
                Build.Utility.CommanFunctionPDF oPDF = new Build.Utility.CommanFunctionPDF();
                string ImagePath = Server.MapPath("~/Images/Icon/mayurlogo1.jpg");
                string Header = string.Empty;
                //if (ViewState["Header"] != null)
                //{
                Response.Clear();
                //   Header = Convert.ToString(ViewState["Header"]);
                Header = "List Of Enquiries";
                GeneratePDF(ImagePath, Header + ".pdf", Header, GridExp, this.Page);
                Header = Header.Replace(" ", "_");
                Response.ContentType = "application/pdf";
                Response.AddHeader("content-disposition", "attachment; filename=" + Header + ".pdf");
                Response.Flush();
                Response.End();
                //}
            }

            else
            {
                Obj_Comm.ShowPopUpMsg("No Data Found..!", this.Page);
                //GridReportList.DataSource = dsLogin.Tables[0];
                //GridReportList.DataBind();

                //dsLogin.Clear();

            }


        }
        catch (Exception ex)
        {
            ////Obj_Comm.ShowPopUpMsg(ex.Message, this.Page);
        }
    }

    public void GeneratePDF(string Imagepath, string fileName, string HeaderName, GridView GridReport, Page oPage)
    {
        var document = new Document(PageSize.A4, 50, 50, 25, 25);
        document.SetMargins(3, 3, 3, 3);
        try
        {
            // oPage.Response.Clear();
            PdfWriter.GetInstance(document, oPage.Response.OutputStream);
            // generates the grid first
            StringBuilder strB = new StringBuilder();
            StringBuilder strB1 = new StringBuilder();
            string str = string.Empty;
            str = " <table width='100%' ><tr><td align='center'><b>" + HeaderName + "</b></td></tr></table><br><br>";
            strB.Append(str);
            document.Open();
            using (StringWriter sWriter = new StringWriter(strB))
            {
                using (HtmlTextWriter htWriter = new HtmlTextWriter(sWriter))
                {
                    GridReport.RenderControl(htWriter);
                }
            }

            // now read the Grid html one by one and add into the document object
            using (TextReader sReader = new StringReader(strB.ToString()))
            {
                //iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(Imagepath);
                //document.Add(gif);
                List<IElement> list = HTMLWorker.ParseToList(sReader, new StyleSheet());
                foreach (IElement elm in list)
                {
                    document.Add(elm);

                }
            }
            //oPage.Response.ContentType = "application/pdf";
            //oPage.Response.AddHeader("content-disposition", "attachment; filename=" + fileName);
            //oPage.Response.Flush();
            //oPage.Response.End();
        }
        catch (Exception ex)
        {
            // throw new Exception(ex.Message);
        }
        finally
        {
            document.Close();
        }
    }

    protected void ddlProject_SelectedIndexChanged(object sender, EventArgs e)
    {
        int ProjectID = Convert.ToInt32(ddlProject.SelectedValue);
        DataSet Ds = new DataSet();
        Ds = Obj_ProsCust.FillComboTOWERStage(ProjectID, out StrError);

        if (Ds.Tables.Count > 0)
        {
            if (Ds.Tables[0].Rows.Count > 0)
            {
                ddlStage.DataSource = Ds.Tables[0];
                ddlStage.DataTextField = "StageName";
                ddlStage.DataValueField = "DemandID";
                ddlStage.DataBind();
            }
            if (Ds.Tables[1].Rows.Count > 0)
            {
                ddlTower.DataSource = Ds.Tables[1];
                ddlTower.DataTextField = "TowerName";
                ddlTower.DataValueField = "TowerId";
                ddlTower.DataBind();
            }
        }
    }

    protected void ddlTower_SelectedIndexChanged(object sender, EventArgs e)
    {
        int ProjectID = Convert.ToInt32(ddlProject.SelectedValue);
        DataSet Ds = new DataSet();
        Ds = Obj_ProsCust.FillComboCustomerUNIT(Convert.ToString(ddlTower.SelectedItem.Text), ProjectID, out StrError);

        if (Ds.Tables.Count > 0)
        {
            if (Ds.Tables[0].Rows.Count > 0)
            {
                ddlCustomer.DataSource = Ds.Tables[0];
                ddlCustomer.DataTextField = "Customer";
                ddlCustomer.DataValueField = "CUSTlId";
                ddlCustomer.DataBind();
            }
            if (Ds.Tables[1].Rows.Count > 0)
            {
                ddlUnit.DataSource = Ds.Tables[1];
                ddlUnit.DataTextField = "FlatType";
                ddlUnit.DataValueField = "FlatTypeId";
                ddlUnit.DataBind();
            }
        }
    }

    protected void ImgBtnPrint_Click(object sender, ImageClickEventArgs e)
    {

    }

    protected void GridEnquiry_RowDataBound(object sender, GridViewRowEventArgs e)
    {
       
        //decimal NetTotal = 0,area=0,AGVALUE=0,STAGEDues=0,StageREC,STBalanCE;
        if (e.Row.RowType != DataControlRowType.Pager)
        {
            if (e.Row.RowType == DataControlRowType.DataRow && !string.IsNullOrEmpty(Convert.ToString(DataBinder.Eval(e.Row.DataItem, "FlatNo"))))
            {
                if (Convert.ToString(DataBinder.Eval(e.Row.DataItem, "Applicant1")).Equals("-"))
                {
                    e.Row.BackColor = System.Drawing.Color.LawnGreen;
                }
                area += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "SaleableArea"));
                AGVALUE += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "TotalFlatAmount"));
                STAGEDues += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "StageDues"));
                StageREC += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "AmtRecd"));
                STBalanCE += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "Balance"));
                avgSaleRate += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "RateperSqft"));
            }
            if (e.Row.RowType == DataControlRowType.DataRow && !string.IsNullOrEmpty(Convert.ToString(DataBinder.Eval(e.Row.DataItem, "RateperSqft"))) && Convert.ToInt32(DataBinder.Eval(e.Row.DataItem, "RateperSqft")) > 0)
            {
                SOILDAREA += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "SaleableArea"));
                Fcount ++;

            }
            if (Fcount > 0)
            {
                if (e.Row.RowType == DataControlRowType.Footer)
                {
                    e.Row.Cells[3].Text = "Total";
                    e.Row.Cells[4].Text = area.ToString("0.00");
                    e.Row.Cells[5].Text = avgSaleRate.ToString("0.00");
                    e.Row.Cells[6].Text = AGVALUE.ToString("0.00");
                    e.Row.Cells[8].Text = STAGEDues.ToString("0.00");
                    e.Row.Cells[9].Text = StageREC.ToString("0.00");
                    e.Row.Cells[10].Text = STBalanCE.ToString("0.00");


                    txtTotalArea.Text = area.ToString("0.00");
                    txtSoldArea.Text = SOILDAREA.ToString("0.00");
                    txtVacantArea.Text = (area - SOILDAREA).ToString("0.00");
                    txtAvgSaleRate.Text = (avgSaleRate / Fcount).ToString("0.00");
                    txtBIAR.Text = ((area - SOILDAREA) * (avgSaleRate / Fcount)).ToString("0.00");
                    txtBIAP.Text = Fcount.ToString("0.00");
                    area = 0;
                    AGVALUE = 0;
                    STAGEDues = 0;
                    StageREC = 0;
                    STBalanCE = 0;

                }
            }
        }
    }
}
